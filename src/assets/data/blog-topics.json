{
  "title": "My Blog",
  "description": "I've decided to document all of the things I add to my project in here, sort of like a little blog of everything I'm using. From Resources I find helpful, to libraries and why I decided to go with them. If you have any questions, please feel free to Contact Me! Hope you can find these helpful!",
  "buttons": [
    {
      "name": "React Router",
      "url": "#react"
    },
    {
      "name": "Styled Components",
      "url": "#styled"
    },
    {
      "name": "Coolors",
      "url": "#coolors"
    },
    {
      "name": "React Spring",
      "url": "#react-spring"
    }
  ],
  "cards": [
    {
      "title": "React Router",
      "id": "react",
      "linkItems": {
        "title": "Click here to go to React Router Site",
        "url": "https://reactrouter.com/en/main",
        "openInNewTab": true
      },
      "description": "<p>To achieve my Navigation, along with the different pages, I decided to use React Router! Some tips I've learned already is instead of importing Browser Router, I needed to use Hash Router. This is because GitHub Pages doesn't handle server-side routing, so when you try to navigate to a different 'page' using Browser Router, it will return a 404 error. Luckily, Chat GPT was able to help me figure this out rather quickly!</p><p>I've used React Router before, but I've never implemented it myself, so I also had to re-learn it really quick. Some quick notes about how it works are:</p><h3>1. Route Matching:</h3><p>When the URL changes, React Router matches the URL against the defined routes.</p><h3>2. Component Rendering:</h3><p>React Router renders the component associated with the matching route.</p><h3>3. History Management:</h3><p>The history API is used to update the browsers history stack, allowing users to navigate back and forth.</p>"
    },
    {
      "title": "Styled Components!",
      "id": "styled",
      "linkItems": {
        "title": "Click here to go to Styled Components Site.",
        "url": "https://styled-components.com/",
        "openInNewTab": true
      },
      "description": "<p>Styled Components are a CSS-in-JS library that allows you to write CSS directly in JavaScript to style React components! I use it a lot for work, and honestly couldn't imagine a life without it! It allows you to change styling based on different variables, and allows you to set up theme variables you can easily access in your app, as well as all of your components!</p>"
    },
    {
      "title": "Coolors!",
      "id": "coolors",
      "linkItems": {
        "title": "Click here to go to Coolors Site.",
        "url": "https://coolors.co/",
        "openInNewTab": true
      },
      "description": "<p>This Resource is actually so fun, BUT so hard to use because it is so hard to settle on a good color palette. Or at least that is one of my biggest challenges. When selecting theme colors you have to keep in mind about WCAG Compliance. Just because something looks nice, doesn't necessarily mean that it is WCAG Compliant, so it is very important to pick colors with good contrast ratios!</p>"
    },
    {
      "title": "React Spring",
      "id": "react-spring",
      "linkItems": {
        "title": "Click here to go to React Spring Site.",
        "url": "https://www.react-spring.dev/",
        "openInNewTab": true
      },
      "description": "<p>This is the most fun styling library!!</p>"
    }
  ]
}
